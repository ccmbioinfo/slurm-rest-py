"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from slurm_rest.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from slurm_rest.exceptions import ApiAttributeError


def lazy_import():
    from slurm_rest.model.v0037_job_resources import V0037JobResources
    globals()['V0037JobResources'] = V0037JobResources


class V0037JobResponseProperties(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'account': (str,),  # noqa: E501
            'accrue_time': (int,),  # noqa: E501
            'admin_comment': (str,),  # noqa: E501
            'array_job_id': (str,),  # noqa: E501
            'array_task_id': (str,),  # noqa: E501
            'array_max_tasks': (str,),  # noqa: E501
            'array_task_string': (str,),  # noqa: E501
            'association_id': (str,),  # noqa: E501
            'batch_features': (str,),  # noqa: E501
            'batch_flag': (bool,),  # noqa: E501
            'batch_host': (str,),  # noqa: E501
            'flags': ([str],),  # noqa: E501
            'burst_buffer': (str,),  # noqa: E501
            'burst_buffer_state': (str,),  # noqa: E501
            'cluster': (str,),  # noqa: E501
            'cluster_features': (str,),  # noqa: E501
            'command': (str,),  # noqa: E501
            'comment': (str,),  # noqa: E501
            'contiguous': (bool,),  # noqa: E501
            'core_spec': (str,),  # noqa: E501
            'thread_spec': (str,),  # noqa: E501
            'cores_per_socket': (str,),  # noqa: E501
            'billable_tres': (str,),  # noqa: E501
            'cpus_per_task': (str,),  # noqa: E501
            'cpu_frequency_minimum': (str,),  # noqa: E501
            'cpu_frequency_maximum': (str,),  # noqa: E501
            'cpu_frequency_governor': (str,),  # noqa: E501
            'cpus_per_tres': (str,),  # noqa: E501
            'deadline': (str,),  # noqa: E501
            'delay_boot': (str,),  # noqa: E501
            'dependency': (str,),  # noqa: E501
            'derived_exit_code': (str,),  # noqa: E501
            'eligible_time': (int,),  # noqa: E501
            'end_time': (int,),  # noqa: E501
            'excluded_nodes': (str,),  # noqa: E501
            'exit_code': (int,),  # noqa: E501
            'features': (str,),  # noqa: E501
            'federation_origin': (str,),  # noqa: E501
            'federation_siblings_active': (str,),  # noqa: E501
            'federation_siblings_viable': (str,),  # noqa: E501
            'gres_detail': ([str],),  # noqa: E501
            'group_id': (str,),  # noqa: E501
            'job_id': (str,),  # noqa: E501
            'job_resources': (V0037JobResources,),  # noqa: E501
            'job_state': (str,),  # noqa: E501
            'last_sched_evaluation': (str,),  # noqa: E501
            'licenses': (str,),  # noqa: E501
            'max_cpus': (str,),  # noqa: E501
            'max_nodes': (str,),  # noqa: E501
            'mcs_label': (str,),  # noqa: E501
            'memory_per_tres': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'nodes': (str,),  # noqa: E501
            'nice': (str,),  # noqa: E501
            'tasks_per_core': (str,),  # noqa: E501
            'tasks_per_socket': (str,),  # noqa: E501
            'tasks_per_board': (str,),  # noqa: E501
            'cpus': (str,),  # noqa: E501
            'node_count': (str,),  # noqa: E501
            'tasks': (str,),  # noqa: E501
            'het_job_id': (str,),  # noqa: E501
            'het_job_id_set': (str,),  # noqa: E501
            'het_job_offset': (str,),  # noqa: E501
            'partition': (str,),  # noqa: E501
            'memory_per_node': (str,),  # noqa: E501
            'memory_per_cpu': (str,),  # noqa: E501
            'minimum_cpus_per_node': (str,),  # noqa: E501
            'minimum_tmp_disk_per_node': (str,),  # noqa: E501
            'preempt_time': (int,),  # noqa: E501
            'pre_sus_time': (int,),  # noqa: E501
            'priority': (str,),  # noqa: E501
            'profile': ([str],),  # noqa: E501
            'qos': (str,),  # noqa: E501
            'reboot': (bool,),  # noqa: E501
            'required_nodes': (str,),  # noqa: E501
            'requeue': (bool,),  # noqa: E501
            'resize_time': (int,),  # noqa: E501
            'restart_cnt': (str,),  # noqa: E501
            'resv_name': (str,),  # noqa: E501
            'shared': (str,),  # noqa: E501
            'show_flags': ([str],),  # noqa: E501
            'sockets_per_board': (str,),  # noqa: E501
            'sockets_per_node': (str,),  # noqa: E501
            'start_time': (int,),  # noqa: E501
            'state_description': (str,),  # noqa: E501
            'state_reason': (str,),  # noqa: E501
            'standard_error': (str,),  # noqa: E501
            'standard_input': (str,),  # noqa: E501
            'standard_output': (str,),  # noqa: E501
            'submit_time': (int,),  # noqa: E501
            'suspend_time': (int,),  # noqa: E501
            'system_comment': (str,),  # noqa: E501
            'time_limit': (str,),  # noqa: E501
            'time_minimum': (str,),  # noqa: E501
            'threads_per_core': (str,),  # noqa: E501
            'tres_bind': (str,),  # noqa: E501
            'tres_freq': (str,),  # noqa: E501
            'tres_per_job': (str,),  # noqa: E501
            'tres_per_node': (str,),  # noqa: E501
            'tres_per_socket': (str,),  # noqa: E501
            'tres_per_task': (str,),  # noqa: E501
            'tres_req_str': (str,),  # noqa: E501
            'tres_alloc_str': (str,),  # noqa: E501
            'user_id': (str,),  # noqa: E501
            'user_name': (str,),  # noqa: E501
            'wckey': (str,),  # noqa: E501
            'current_working_directory': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'account': 'account',  # noqa: E501
        'accrue_time': 'accrue_time',  # noqa: E501
        'admin_comment': 'admin_comment',  # noqa: E501
        'array_job_id': 'array_job_id',  # noqa: E501
        'array_task_id': 'array_task_id',  # noqa: E501
        'array_max_tasks': 'array_max_tasks',  # noqa: E501
        'array_task_string': 'array_task_string',  # noqa: E501
        'association_id': 'association_id',  # noqa: E501
        'batch_features': 'batch_features',  # noqa: E501
        'batch_flag': 'batch_flag',  # noqa: E501
        'batch_host': 'batch_host',  # noqa: E501
        'flags': 'flags',  # noqa: E501
        'burst_buffer': 'burst_buffer',  # noqa: E501
        'burst_buffer_state': 'burst_buffer_state',  # noqa: E501
        'cluster': 'cluster',  # noqa: E501
        'cluster_features': 'cluster_features',  # noqa: E501
        'command': 'command',  # noqa: E501
        'comment': 'comment',  # noqa: E501
        'contiguous': 'contiguous',  # noqa: E501
        'core_spec': 'core_spec',  # noqa: E501
        'thread_spec': 'thread_spec',  # noqa: E501
        'cores_per_socket': 'cores_per_socket',  # noqa: E501
        'billable_tres': 'billable_tres',  # noqa: E501
        'cpus_per_task': 'cpus_per_task',  # noqa: E501
        'cpu_frequency_minimum': 'cpu_frequency_minimum',  # noqa: E501
        'cpu_frequency_maximum': 'cpu_frequency_maximum',  # noqa: E501
        'cpu_frequency_governor': 'cpu_frequency_governor',  # noqa: E501
        'cpus_per_tres': 'cpus_per_tres',  # noqa: E501
        'deadline': 'deadline',  # noqa: E501
        'delay_boot': 'delay_boot',  # noqa: E501
        'dependency': 'dependency',  # noqa: E501
        'derived_exit_code': 'derived_exit_code',  # noqa: E501
        'eligible_time': 'eligible_time',  # noqa: E501
        'end_time': 'end_time',  # noqa: E501
        'excluded_nodes': 'excluded_nodes',  # noqa: E501
        'exit_code': 'exit_code',  # noqa: E501
        'features': 'features',  # noqa: E501
        'federation_origin': 'federation_origin',  # noqa: E501
        'federation_siblings_active': 'federation_siblings_active',  # noqa: E501
        'federation_siblings_viable': 'federation_siblings_viable',  # noqa: E501
        'gres_detail': 'gres_detail',  # noqa: E501
        'group_id': 'group_id',  # noqa: E501
        'job_id': 'job_id',  # noqa: E501
        'job_resources': 'job_resources',  # noqa: E501
        'job_state': 'job_state',  # noqa: E501
        'last_sched_evaluation': 'last_sched_evaluation',  # noqa: E501
        'licenses': 'licenses',  # noqa: E501
        'max_cpus': 'max_cpus',  # noqa: E501
        'max_nodes': 'max_nodes',  # noqa: E501
        'mcs_label': 'mcs_label',  # noqa: E501
        'memory_per_tres': 'memory_per_tres',  # noqa: E501
        'name': 'name',  # noqa: E501
        'nodes': 'nodes',  # noqa: E501
        'nice': 'nice',  # noqa: E501
        'tasks_per_core': 'tasks_per_core',  # noqa: E501
        'tasks_per_socket': 'tasks_per_socket',  # noqa: E501
        'tasks_per_board': 'tasks_per_board',  # noqa: E501
        'cpus': 'cpus',  # noqa: E501
        'node_count': 'node_count',  # noqa: E501
        'tasks': 'tasks',  # noqa: E501
        'het_job_id': 'het_job_id',  # noqa: E501
        'het_job_id_set': 'het_job_id_set',  # noqa: E501
        'het_job_offset': 'het_job_offset',  # noqa: E501
        'partition': 'partition',  # noqa: E501
        'memory_per_node': 'memory_per_node',  # noqa: E501
        'memory_per_cpu': 'memory_per_cpu',  # noqa: E501
        'minimum_cpus_per_node': 'minimum_cpus_per_node',  # noqa: E501
        'minimum_tmp_disk_per_node': 'minimum_tmp_disk_per_node',  # noqa: E501
        'preempt_time': 'preempt_time',  # noqa: E501
        'pre_sus_time': 'pre_sus_time',  # noqa: E501
        'priority': 'priority',  # noqa: E501
        'profile': 'profile',  # noqa: E501
        'qos': 'qos',  # noqa: E501
        'reboot': 'reboot',  # noqa: E501
        'required_nodes': 'required_nodes',  # noqa: E501
        'requeue': 'requeue',  # noqa: E501
        'resize_time': 'resize_time',  # noqa: E501
        'restart_cnt': 'restart_cnt',  # noqa: E501
        'resv_name': 'resv_name',  # noqa: E501
        'shared': 'shared',  # noqa: E501
        'show_flags': 'show_flags',  # noqa: E501
        'sockets_per_board': 'sockets_per_board',  # noqa: E501
        'sockets_per_node': 'sockets_per_node',  # noqa: E501
        'start_time': 'start_time',  # noqa: E501
        'state_description': 'state_description',  # noqa: E501
        'state_reason': 'state_reason',  # noqa: E501
        'standard_error': 'standard_error',  # noqa: E501
        'standard_input': 'standard_input',  # noqa: E501
        'standard_output': 'standard_output',  # noqa: E501
        'submit_time': 'submit_time',  # noqa: E501
        'suspend_time': 'suspend_time',  # noqa: E501
        'system_comment': 'system_comment',  # noqa: E501
        'time_limit': 'time_limit',  # noqa: E501
        'time_minimum': 'time_minimum',  # noqa: E501
        'threads_per_core': 'threads_per_core',  # noqa: E501
        'tres_bind': 'tres_bind',  # noqa: E501
        'tres_freq': 'tres_freq',  # noqa: E501
        'tres_per_job': 'tres_per_job',  # noqa: E501
        'tres_per_node': 'tres_per_node',  # noqa: E501
        'tres_per_socket': 'tres_per_socket',  # noqa: E501
        'tres_per_task': 'tres_per_task',  # noqa: E501
        'tres_req_str': 'tres_req_str',  # noqa: E501
        'tres_alloc_str': 'tres_alloc_str',  # noqa: E501
        'user_id': 'user_id',  # noqa: E501
        'user_name': 'user_name',  # noqa: E501
        'wckey': 'wckey',  # noqa: E501
        'current_working_directory': 'current_working_directory',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """V0037JobResponseProperties - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account (str): Charge resources used by this job to specified account. [optional]  # noqa: E501
            accrue_time (int): time job is eligible for running. [optional]  # noqa: E501
            admin_comment (str): administrator's arbitrary comment. [optional]  # noqa: E501
            array_job_id (str): job_id of a job array or 0 if N/A. [optional]  # noqa: E501
            array_task_id (str): task_id of a job array. [optional]  # noqa: E501
            array_max_tasks (str): Maximum number of running array tasks. [optional]  # noqa: E501
            array_task_string (str): string expression of task IDs in this record. [optional]  # noqa: E501
            association_id (str): association id for job. [optional]  # noqa: E501
            batch_features (str): features required for batch script's node. [optional]  # noqa: E501
            batch_flag (bool): if batch: queued job with script. [optional]  # noqa: E501
            batch_host (str): name of host running batch script. [optional]  # noqa: E501
            flags ([str]): Job flags. [optional]  # noqa: E501
            burst_buffer (str): burst buffer specifications. [optional]  # noqa: E501
            burst_buffer_state (str): burst buffer state info. [optional]  # noqa: E501
            cluster (str): name of cluster that the job is on. [optional]  # noqa: E501
            cluster_features (str): comma separated list of required cluster features. [optional]  # noqa: E501
            command (str): command to be executed. [optional]  # noqa: E501
            comment (str): arbitrary comment. [optional]  # noqa: E501
            contiguous (bool): job requires contiguous nodes. [optional]  # noqa: E501
            core_spec (str): specialized core count. [optional]  # noqa: E501
            thread_spec (str): specialized thread count. [optional]  # noqa: E501
            cores_per_socket (str): cores per socket required by job. [optional]  # noqa: E501
            billable_tres (str): billable TRES. [optional]  # noqa: E501
            cpus_per_task (str): number of processors required for each task. [optional]  # noqa: E501
            cpu_frequency_minimum (str): Minimum cpu frequency. [optional]  # noqa: E501
            cpu_frequency_maximum (str): Maximum cpu frequency. [optional]  # noqa: E501
            cpu_frequency_governor (str): cpu frequency governor. [optional]  # noqa: E501
            cpus_per_tres (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            deadline (str): job start deadline . [optional]  # noqa: E501
            delay_boot (str): command to be executed. [optional]  # noqa: E501
            dependency (str): synchronize job execution with other jobs. [optional]  # noqa: E501
            derived_exit_code (str): highest exit code of all job steps. [optional]  # noqa: E501
            eligible_time (int): time job is eligible for running. [optional]  # noqa: E501
            end_time (int): time of termination, actual or expected. [optional]  # noqa: E501
            excluded_nodes (str): comma separated list of excluded nodes. [optional]  # noqa: E501
            exit_code (int): exit code for job. [optional]  # noqa: E501
            features (str): comma separated list of required features. [optional]  # noqa: E501
            federation_origin (str): Origin cluster's name. [optional]  # noqa: E501
            federation_siblings_active (str): string of active sibling names. [optional]  # noqa: E501
            federation_siblings_viable (str): string of viable sibling names. [optional]  # noqa: E501
            gres_detail ([str]): Job flags. [optional]  # noqa: E501
            group_id (str): group job submitted as. [optional]  # noqa: E501
            job_id (str): job ID. [optional]  # noqa: E501
            job_resources (V0037JobResources): [optional]  # noqa: E501
            job_state (str): state of the job. [optional]  # noqa: E501
            last_sched_evaluation (str): last time job was evaluated for scheduling. [optional]  # noqa: E501
            licenses (str): licenses required by the job. [optional]  # noqa: E501
            max_cpus (str): maximum number of cpus usable by job. [optional]  # noqa: E501
            max_nodes (str): maximum number of nodes usable by job. [optional]  # noqa: E501
            mcs_label (str): mcs_label if mcs plugin in use. [optional]  # noqa: E501
            memory_per_tres (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            name (str): name of the job. [optional]  # noqa: E501
            nodes (str): list of nodes allocated to job. [optional]  # noqa: E501
            nice (str): requested priority change. [optional]  # noqa: E501
            tasks_per_core (str): number of tasks to invoke on each core. [optional]  # noqa: E501
            tasks_per_socket (str): number of tasks to invoke on each socket. [optional]  # noqa: E501
            tasks_per_board (str): number of tasks to invoke on each board. [optional]  # noqa: E501
            cpus (str): minimum number of cpus required by job. [optional]  # noqa: E501
            node_count (str): minimum number of nodes required by job. [optional]  # noqa: E501
            tasks (str): requested task count. [optional]  # noqa: E501
            het_job_id (str): job ID of hetjob leader. [optional]  # noqa: E501
            het_job_id_set (str): job IDs for all components. [optional]  # noqa: E501
            het_job_offset (str): HetJob component offset from leader. [optional]  # noqa: E501
            partition (str): name of assigned partition. [optional]  # noqa: E501
            memory_per_node (str): minimum real memory per node. [optional]  # noqa: E501
            memory_per_cpu (str): minimum real memory per cpu. [optional]  # noqa: E501
            minimum_cpus_per_node (str): minimum # CPUs per node. [optional]  # noqa: E501
            minimum_tmp_disk_per_node (str): minimum tmp disk per node. [optional]  # noqa: E501
            preempt_time (int): preemption signal time. [optional]  # noqa: E501
            pre_sus_time (int): time job ran prior to last suspend. [optional]  # noqa: E501
            priority (str): relative priority of the job. [optional]  # noqa: E501
            profile ([str]): Job profiling requested. [optional]  # noqa: E501
            qos (str): Quality of Service. [optional]  # noqa: E501
            reboot (bool): node reboot requested before start. [optional]  # noqa: E501
            required_nodes (str): comma separated list of required nodes. [optional]  # noqa: E501
            requeue (bool): enable or disable job requeue option. [optional]  # noqa: E501
            resize_time (int): time of latest size change. [optional]  # noqa: E501
            restart_cnt (str): count of job restarts. [optional]  # noqa: E501
            resv_name (str): reservation name. [optional]  # noqa: E501
            shared (str): type and if job can share nodes with other jobs. [optional]  # noqa: E501
            show_flags ([str]): details requested. [optional]  # noqa: E501
            sockets_per_board (str): sockets per board required by job. [optional]  # noqa: E501
            sockets_per_node (str): sockets per node required by job. [optional]  # noqa: E501
            start_time (int): time execution begins, actual or expected. [optional]  # noqa: E501
            state_description (str): optional details for state_reason. [optional]  # noqa: E501
            state_reason (str): reason job still pending or failed. [optional]  # noqa: E501
            standard_error (str): pathname of job's stderr file. [optional]  # noqa: E501
            standard_input (str): pathname of job's stdin file. [optional]  # noqa: E501
            standard_output (str): pathname of job's stdout file. [optional]  # noqa: E501
            submit_time (int): time of job submission. [optional]  # noqa: E501
            suspend_time (int): time job last suspended or resumed. [optional]  # noqa: E501
            system_comment (str): slurmctld's arbitrary comment. [optional]  # noqa: E501
            time_limit (str): maximum run time in minutes. [optional]  # noqa: E501
            time_minimum (str): minimum run time in minutes. [optional]  # noqa: E501
            threads_per_core (str): threads per core required by job. [optional]  # noqa: E501
            tres_bind (str): Task to TRES binding directives. [optional]  # noqa: E501
            tres_freq (str): TRES frequency directives. [optional]  # noqa: E501
            tres_per_job (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            tres_per_node (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            tres_per_socket (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            tres_per_task (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            tres_req_str (str): tres reqeusted in the job. [optional]  # noqa: E501
            tres_alloc_str (str): tres used in the job. [optional]  # noqa: E501
            user_id (str): user id the job runs as. [optional]  # noqa: E501
            user_name (str): user the job runs as. [optional]  # noqa: E501
            wckey (str): wckey for job. [optional]  # noqa: E501
            current_working_directory (str): pathname of working directory. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """V0037JobResponseProperties - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account (str): Charge resources used by this job to specified account. [optional]  # noqa: E501
            accrue_time (int): time job is eligible for running. [optional]  # noqa: E501
            admin_comment (str): administrator's arbitrary comment. [optional]  # noqa: E501
            array_job_id (str): job_id of a job array or 0 if N/A. [optional]  # noqa: E501
            array_task_id (str): task_id of a job array. [optional]  # noqa: E501
            array_max_tasks (str): Maximum number of running array tasks. [optional]  # noqa: E501
            array_task_string (str): string expression of task IDs in this record. [optional]  # noqa: E501
            association_id (str): association id for job. [optional]  # noqa: E501
            batch_features (str): features required for batch script's node. [optional]  # noqa: E501
            batch_flag (bool): if batch: queued job with script. [optional]  # noqa: E501
            batch_host (str): name of host running batch script. [optional]  # noqa: E501
            flags ([str]): Job flags. [optional]  # noqa: E501
            burst_buffer (str): burst buffer specifications. [optional]  # noqa: E501
            burst_buffer_state (str): burst buffer state info. [optional]  # noqa: E501
            cluster (str): name of cluster that the job is on. [optional]  # noqa: E501
            cluster_features (str): comma separated list of required cluster features. [optional]  # noqa: E501
            command (str): command to be executed. [optional]  # noqa: E501
            comment (str): arbitrary comment. [optional]  # noqa: E501
            contiguous (bool): job requires contiguous nodes. [optional]  # noqa: E501
            core_spec (str): specialized core count. [optional]  # noqa: E501
            thread_spec (str): specialized thread count. [optional]  # noqa: E501
            cores_per_socket (str): cores per socket required by job. [optional]  # noqa: E501
            billable_tres (str): billable TRES. [optional]  # noqa: E501
            cpus_per_task (str): number of processors required for each task. [optional]  # noqa: E501
            cpu_frequency_minimum (str): Minimum cpu frequency. [optional]  # noqa: E501
            cpu_frequency_maximum (str): Maximum cpu frequency. [optional]  # noqa: E501
            cpu_frequency_governor (str): cpu frequency governor. [optional]  # noqa: E501
            cpus_per_tres (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            deadline (str): job start deadline . [optional]  # noqa: E501
            delay_boot (str): command to be executed. [optional]  # noqa: E501
            dependency (str): synchronize job execution with other jobs. [optional]  # noqa: E501
            derived_exit_code (str): highest exit code of all job steps. [optional]  # noqa: E501
            eligible_time (int): time job is eligible for running. [optional]  # noqa: E501
            end_time (int): time of termination, actual or expected. [optional]  # noqa: E501
            excluded_nodes (str): comma separated list of excluded nodes. [optional]  # noqa: E501
            exit_code (int): exit code for job. [optional]  # noqa: E501
            features (str): comma separated list of required features. [optional]  # noqa: E501
            federation_origin (str): Origin cluster's name. [optional]  # noqa: E501
            federation_siblings_active (str): string of active sibling names. [optional]  # noqa: E501
            federation_siblings_viable (str): string of viable sibling names. [optional]  # noqa: E501
            gres_detail ([str]): Job flags. [optional]  # noqa: E501
            group_id (str): group job submitted as. [optional]  # noqa: E501
            job_id (str): job ID. [optional]  # noqa: E501
            job_resources (V0037JobResources): [optional]  # noqa: E501
            job_state (str): state of the job. [optional]  # noqa: E501
            last_sched_evaluation (str): last time job was evaluated for scheduling. [optional]  # noqa: E501
            licenses (str): licenses required by the job. [optional]  # noqa: E501
            max_cpus (str): maximum number of cpus usable by job. [optional]  # noqa: E501
            max_nodes (str): maximum number of nodes usable by job. [optional]  # noqa: E501
            mcs_label (str): mcs_label if mcs plugin in use. [optional]  # noqa: E501
            memory_per_tres (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            name (str): name of the job. [optional]  # noqa: E501
            nodes (str): list of nodes allocated to job. [optional]  # noqa: E501
            nice (str): requested priority change. [optional]  # noqa: E501
            tasks_per_core (str): number of tasks to invoke on each core. [optional]  # noqa: E501
            tasks_per_socket (str): number of tasks to invoke on each socket. [optional]  # noqa: E501
            tasks_per_board (str): number of tasks to invoke on each board. [optional]  # noqa: E501
            cpus (str): minimum number of cpus required by job. [optional]  # noqa: E501
            node_count (str): minimum number of nodes required by job. [optional]  # noqa: E501
            tasks (str): requested task count. [optional]  # noqa: E501
            het_job_id (str): job ID of hetjob leader. [optional]  # noqa: E501
            het_job_id_set (str): job IDs for all components. [optional]  # noqa: E501
            het_job_offset (str): HetJob component offset from leader. [optional]  # noqa: E501
            partition (str): name of assigned partition. [optional]  # noqa: E501
            memory_per_node (str): minimum real memory per node. [optional]  # noqa: E501
            memory_per_cpu (str): minimum real memory per cpu. [optional]  # noqa: E501
            minimum_cpus_per_node (str): minimum # CPUs per node. [optional]  # noqa: E501
            minimum_tmp_disk_per_node (str): minimum tmp disk per node. [optional]  # noqa: E501
            preempt_time (int): preemption signal time. [optional]  # noqa: E501
            pre_sus_time (int): time job ran prior to last suspend. [optional]  # noqa: E501
            priority (str): relative priority of the job. [optional]  # noqa: E501
            profile ([str]): Job profiling requested. [optional]  # noqa: E501
            qos (str): Quality of Service. [optional]  # noqa: E501
            reboot (bool): node reboot requested before start. [optional]  # noqa: E501
            required_nodes (str): comma separated list of required nodes. [optional]  # noqa: E501
            requeue (bool): enable or disable job requeue option. [optional]  # noqa: E501
            resize_time (int): time of latest size change. [optional]  # noqa: E501
            restart_cnt (str): count of job restarts. [optional]  # noqa: E501
            resv_name (str): reservation name. [optional]  # noqa: E501
            shared (str): type and if job can share nodes with other jobs. [optional]  # noqa: E501
            show_flags ([str]): details requested. [optional]  # noqa: E501
            sockets_per_board (str): sockets per board required by job. [optional]  # noqa: E501
            sockets_per_node (str): sockets per node required by job. [optional]  # noqa: E501
            start_time (int): time execution begins, actual or expected. [optional]  # noqa: E501
            state_description (str): optional details for state_reason. [optional]  # noqa: E501
            state_reason (str): reason job still pending or failed. [optional]  # noqa: E501
            standard_error (str): pathname of job's stderr file. [optional]  # noqa: E501
            standard_input (str): pathname of job's stdin file. [optional]  # noqa: E501
            standard_output (str): pathname of job's stdout file. [optional]  # noqa: E501
            submit_time (int): time of job submission. [optional]  # noqa: E501
            suspend_time (int): time job last suspended or resumed. [optional]  # noqa: E501
            system_comment (str): slurmctld's arbitrary comment. [optional]  # noqa: E501
            time_limit (str): maximum run time in minutes. [optional]  # noqa: E501
            time_minimum (str): minimum run time in minutes. [optional]  # noqa: E501
            threads_per_core (str): threads per core required by job. [optional]  # noqa: E501
            tres_bind (str): Task to TRES binding directives. [optional]  # noqa: E501
            tres_freq (str): TRES frequency directives. [optional]  # noqa: E501
            tres_per_job (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            tres_per_node (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            tres_per_socket (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            tres_per_task (str): semicolon delimited list of TRES=# values. [optional]  # noqa: E501
            tres_req_str (str): tres reqeusted in the job. [optional]  # noqa: E501
            tres_alloc_str (str): tres used in the job. [optional]  # noqa: E501
            user_id (str): user id the job runs as. [optional]  # noqa: E501
            user_name (str): user the job runs as. [optional]  # noqa: E501
            wckey (str): wckey for job. [optional]  # noqa: E501
            current_working_directory (str): pathname of working directory. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
